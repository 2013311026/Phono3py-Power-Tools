#!/usr/bin/env python


# -------
# Imports
# -------

import math

from argparse import ArgumentParser

# If Phonopy is not installed, intercept the ImportError with a clearer error message.

try:
    from phonopy.structure import atoms
except ImportError:
    raise Exception("Error: This script requires Phonopy to be installed.")


# ---------
# Constants
# ---------

""" Threshold for considering a value equal to zero. """

ZeroTolerance = 1.0e-5


# ---------
# Functions
# ---------

def ezip(*iterables):
    """ Combines the enumerate() and zip() built-in functions. """
    
    return enumerate(zip(*iterables))

def ParseFracVal(val):
    """ Parses fractional values entered as strings of the form 'X/Y'. """
    
    if '/' in val:
        # Assume val is a fraction.
        
        num, denom = val.split('/')
        
        return float(num) / float(denom)
    else:
        # Assume val is a float.
        
        return float(val)


# ----
# Main
# ----

if __name__ == "__main__":
    # Command-line arguments.
    
    parser = ArgumentParser(
        description = "Generate Phono3py input for modelling isotope effects or alloying"
        )
    
    parser.add_argument(
        metavar = "<symbol>",
        nargs = '+', dest="AtomicSymbols",
        help = "List of atomic symbols - if --site-average is set, sites should be separated with commas"
        )
    
    parser.add_argument(
        '--site-average',
        action = 'store_true', dest = 'SiteAverage',
        help = "Output average mass and mass variance for mixed-atom site"
        )
    
    parser.add_argument(
        '--site-occupation',
        metavar = "<occ>",
        dest = 'SiteOccupations',
        help = "Site occupation fractions; can be fractions - e.g. 1/3, and sites should be separated with commas"
        )
    
    args = parser.parse_args()
    
    # Process list of atomic symbols.

    atomic_symbols_str = " ".join(args.AtomicSymbols)
    
    site_atomic_symbols = None
    
    if args.SiteAverage:
        site_atomic_symbols = []
        
        for atomic_symbols in atomic_symbols_str.split(','):
            site_atomic_symbols.append(
                [symbol.strip().title() for symbol in atomic_symbols.split()]
                )
    
    else:
        if ',' in atomic_symbols_str:
            raise Exception("Error: --site-average must be set to input comma-separated lists of atomic symbols.")
        
        site_atomic_symbols = [
            [symbol.strip().title()] for symbol in atomic_symbols_str.split()
            ]
    
    # Check Phonopy database has isotope data for all atom types.
    
    for atomic_symbols in site_atomic_symbols:
        for symbol in atomic_symbols:
            if symbol not in atoms.isotope_data:
                raise Exception("Error: No isotope data for '{0}' in Phonopy database.".format(symbol))
    
    # Process site occupations.
    
    site_occ_fracs = None
    
    if args.SiteAverage:
        if args.SiteOccupations is None:
            raise Exception("Error: --site-occupation must be set if the --site-average option is used.")
        
        site_occ_fracs = []
        
        for occ_fracs in args.SiteOccupations.split(','):
            site_occ_fracs.append(
                [ParseFracVal(val) for val in occ_fracs.split()]
                )
        
        # Sanity checks.
        
        site_occ_input_error = False
        
        if len(site_occ_fracs) != len(site_atomic_symbols):
            site_occ_input_error = True
        
        else:
            for atomic_symbols, occ_fracs in zip(site_atomic_symbols, site_occ_fracs):
                if len(atomic_symbols) != len(occ_fracs):
                    site_occ_input_error = True
        
        if site_occ_input_error:
            raise Exception("Error: The site atom configuration is inconsistent with the supplied occupation fractions.")
        
        for occ_fracs in site_occ_fracs:
            for frac in occ_fracs:
                if frac < 0.0:
                    raise Exception("Error: Site occupations cannot be negative.")

            occ_frac_sum = sum(occ_fracs)
            
            if math.fabs(1.0 - occ_frac_sum) > ZeroTolerance:
                print("WARNING: sum(SiteOccupations) = {0:.4f} != 1.0".format(occ_frac_sum))
                print("")
    
    else:
        site_occ_fracs = [[1.0]] * len(site_atomic_symbols)
    
    # Build a list of (site_name, [ ( a_i, m_i ), ... ]) tuples.
    
    site_comps = []

    for site_index, (atomic_symbols, occ_fracs) in ezip(site_atomic_symbols, site_occ_fracs):
        # Add isotope data for each atom at the mixed site, weighted by the site occupancy.
        
        site_name = "Site {0} ({1})".format(
            site_index + 1, ", ".join(atomic_symbols)
            )
        
        site_iso = []
        
        for symbol, occ_frac in zip(atomic_symbols, occ_fracs):
            for _, m_i, a_i in atoms.isotope_data[symbol]:
                site_iso.append(
                    (occ_frac * a_i, m_i)
                    )
        
        site_comps.append(
            (site_name, site_iso)
            )
    
    # Loop over sites and calculate, collect, and print out average mass and mass variance.
    
    m_aves = []
    m_vars = []
    
    for site_label, site_comp in site_comps:
        site_a_i = [a_i for a_i, _ in site_comp]
        site_m_i = [m_i for _, m_i in site_comp]
        
        m_ave = sum(
            a_i * m_i for a_i, m_i in site_comp
            )
    
        m_var = sum(
            a_i * (1.0 - (m_i / m_ave)) ** 2
                for a_i, m_i in site_comp
            )
        
        print(site_label)
        print('-' * len(site_label))
        
        print("  m_ave = {0:.5f}".format(m_ave))
        print("  m_var = {0:.5e}".format(m_var))
        
        print("")
        
        m_aves.append(m_ave)
        m_vars.append(m_var)
    
    # Use collected averages/variances to generate Phono3py input tags.
    
    print("To input this data into Phono3py:")
    print("---------------------------------")
    
    m_ave_str = " ".join("{0:.5f}".format(m_ave) for m_ave in m_aves)
    m_var_str = " ".join("{0:.5e}".format(m_var) for m_var in m_vars)
    
    print("  --mass=\"{0}\"".format(m_ave_str))
    print("  --mass-variance=\"{0}\"".format(m_var_str))
