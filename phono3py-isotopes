#!/usr/bin/env python


# -------
# Imports
# -------

import math

from argparse import ArgumentParser

# If Phonopy is not installed, intercept the ImportError with a clearer error message.

try:
    from phonopy.structure import atoms
except ImportError:
    raise Exception("Error: This script requires Phonopy to be installed.")


# ---------
# Constants
# ---------

""" Threshold for considering a value equal to zero. """

ZeroTolerance = 1.0e-5


# ---------
# Functions
# ---------

def ezip(*iterables):
    """ Combines the enumerate() and zip() built-in functions. """
    
    return enumerate(zip(*iterables))

def ParseFracVal(val):
    """ Parses fractional values entered as strings of the form 'X/Y'. """
    
    if '/' in val:
        # Assume val is a fraction.
        
        num, denom = val.split('/')
        
        return float(num) / float(denom)
    else:
        # Assume val is a float.
        
        return float(val)

def ParseMultiplier(val):
    """ Parse repeated values entered as strings of the form 'N*X'. """
    
    if '*' in val:
        rep_cnt, rep_val = val.split('*')
        
        return " ".join([rep_val] * int(rep_cnt))
    else:
        return val


# ----
# Main
# ----

if __name__ == "__main__":
    # Command-line arguments.
    
    parser = ArgumentParser(
        description = "Generate Phono3py input for modelling isotope effects"
        )
    
    parser.add_argument(
        metavar = "<symbol_or_mass>",
        nargs = '+', dest="SiteAtomsList",
        help = "List of atomic symbols or masses - if --site-average is set, sites should be separated with commas"
        )
    
    parser.add_argument(
        '--site-average',
        action = 'store_true', dest = 'SiteAverage',
        help = "Output average mass and mass variance for mixed-atom site"
        )
    
    parser.add_argument(
        '--site-occupation',
        metavar = "<occ>",
        dest = 'SiteOccupations',
        help = "Site occupation fractions; can be fractions - e.g. 1/3, and sites should be separated with commas"
        )
    
    parser.add_argument(
        '--scriptable',
        dest = 'Scriptable', action = 'store_true',
        help = "Prints only two lines of output: (1) averaged masses; and (2) mass variance parameters."
        )
    
    args = parser.parse_args()
    
    # Process list of atomic symbols/masses.

    site_atoms_str = None
    
    for val in args.SiteAtomsList:
        val = ParseMultiplier(val)
        
        if site_atoms_str is None:
            site_atoms_str = val
        else:
            site_atoms_str += " " + val
    
    site_atoms_sets = None
    
    if args.SiteAverage:
        site_atoms_sets = []
        
        for sym_or_mass_list in site_atoms_str.split(','):
            site_atoms_sets.append(
                [sym_or_mass for sym_or_mass in sym_or_mass_list.split()]
                )
    
    else:
        if ',' in site_atoms_str:
            raise Exception("Error: --site-average must be set to input comma-separated lists of atomic symbols.")
        
        site_atoms_sets = [
            [sym_or_mass] for sym_or_mass in site_atoms_str.split()
            ]
    
    for site_atoms_set in site_atoms_sets:
        for i, sym_or_mass in enumerate(site_atoms_set):
            try:
                sym_or_mass = float(sym_or_mass)
            except ValueError:
                sym_or_mass = sym_or_mass.title()
            
            site_atoms_set[i] = sym_or_mass
    
    # Check Phonopy database has isotope data for atomic symbols (if input).
    
    for site_atoms_set in site_atoms_sets:
        for sym_or_mass in site_atoms_set:
            if not isinstance(sym_or_mass, float) and sym_or_mass not in atoms.isotope_data:
                raise Exception("Error: No isotope data for '{0}' in Phonopy database.".format(sym_or_mass))
    
    # Process site occupations.
    
    site_occ_fracs_sets = None
    
    if args.SiteAverage:
        if args.SiteOccupations is None:
            raise Exception("Error: --site-occupation must be set if the --site-average option is used.")
        
        site_occ_fracs_sets = []
        
        for occ_fracs_list in args.SiteOccupations.split(','):
            site_occ_fracs_sets.append(
                [ParseFracVal(val) for val in occ_fracs_list.split()]
                )
        
        # Sanity checks.
        
        site_occ_input_error = False
        
        if len(site_occ_fracs_sets) != len(site_atoms_sets):
            site_occ_input_error = True
        
        else:
            for site_atoms_set, site_occ_fracs_set in zip(site_atoms_sets, site_occ_fracs_sets):
                if len(site_atoms_set) != len(site_occ_fracs_set):
                    site_occ_input_error = True
        
        if site_occ_input_error:
            raise Exception("Error: The site atom configuration is inconsistent with the supplied occupation fractions.")
        
        for i, site_occ_fracs_set in enumerate(site_occ_fracs_sets):
            for occ_frac in site_occ_fracs_set:
                if occ_frac < 0.0:
                    raise Exception("Error: Site occupations cannot be negative.")

            site_occ_fracs_sum = sum(site_occ_fracs_set)
            
            if math.fabs(1.0 - site_occ_fracs_sum) > ZeroTolerance:
                print("WARNING: Site {0}: sum(SiteOccupations) = {1:.4f} != 1.0".format(i + 1, site_occ_fracs_sum))
                print("")
    
    else:
        site_occ_fracs_sets = [[1.0]] * len(site_atoms_sets)
    
    # Build a list of (site_name, [ ( a_i, m_i ), ... ]) tuples.
    
    site_comps = []

    for site_index, (site_atoms_set, site_occ_fracs_set) in ezip(site_atoms_sets, site_occ_fracs_sets):
        # Add isotope data for each atom at the mixed site, weighted by the site occupancy.
        
        site_atoms_labels = [
            sym_or_mass if not isinstance(sym_or_mass, float) else '?'
                for sym_or_mass in site_atoms_set
            ]
        
        site_name = "Site {0} ({1})".format(
            site_index + 1, ", ".join(site_atoms_labels)
            )
        
        site_iso = []
        
        for sym_or_mass, occ_frac in zip(site_atoms_set, site_occ_fracs_set):
            if isinstance(sym_or_mass, float):
                site_iso.append(
                    ('?', occ_frac, sym_or_mass)
                    )
            else:
                for z_i, m_i, a_i in atoms.isotope_data[sym_or_mass]:
                    site_iso.append(
                        ("{0}_{1}".format(z_i, sym_or_mass), occ_frac * a_i, m_i)
                        )
        
        site_comps.append(
            (site_name, site_iso)
            )
    
    # Loop over sites and calculate, collect, and print out average mass and mass variance.
    
    m_aves = []
    m_vars = []
    
    for site_label, site_comp in site_comps:
        if not args.Scriptable:
            print(site_label)
            print('-' * len(site_label))
            print("")
            
            for sym, a_i, m_i in site_comp:
                print("  {0: <7} : a_i = {1: >6.2f} %, m_i = {2: >10.5f}".format(sym, a_i * 100.0, m_i))
            
            print("")
        
        site_a_i = [a_i for _, a_i, _ in site_comp]
        site_m_i = [m_i for _, _, m_i in site_comp]
        
        m_ave = sum(
            a_i * m_i for _, a_i, m_i in site_comp
            )
    
        m_var = sum(
            a_i * (1.0 - (m_i / m_ave)) ** 2
                for _, a_i, m_i in site_comp
            )
        
        if not args.Scriptable:
            print("  m_ave = {0:.5f}".format(m_ave))
            print("  m_var = {0:.5e}".format(m_var))
            
            print("")
        
        m_aves.append(m_ave)
        m_vars.append(m_var)
        
    if not args.Scriptable:
        print("")
    
    # Use collected averages/variances to generate Phono3py input tags.

    m_ave_str = " ".join("{0:.5f}".format(m_ave) for m_ave in m_aves)
    m_var_str = " ".join("{0:.5e}".format(m_var) for m_var in m_vars)
    
    if args.Scriptable:
        # Minimal output for using this program within other scripts.
        
        print(m_ave_str)
        print(m_var_str)
    
    else:
        print("To input this data into Phono3py:")
        print("---------------------------------")
        
        print("  --mass=\"{0}\"".format(m_ave_str))
        print("  --mass-variances=\"{0}\"".format(m_var_str))
